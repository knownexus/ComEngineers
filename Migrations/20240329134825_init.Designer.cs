// <auto-generated />
using System;
using EntityFrame.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComEngineers.Migrations
{
    [DbContext(typeof(EntityFrameContext))]
    [Migration("20240329134825_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityFrame.API.Models.Accelerometer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCode")
                        .HasColumnType("datetime2");

                    b.Property<float>("XValue")
                        .HasColumnType("real");

                    b.Property<float>("YValue")
                        .HasColumnType("real");

                    b.Property<float>("ZValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Accelerometer");
                });

            modelBuilder.Entity("EntityFrame.API.Models.Gyroscope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCode")
                        .HasColumnType("datetime2");

                    b.Property<float>("XAxis")
                        .HasColumnType("real");

                    b.Property<float>("YAxis")
                        .HasColumnType("real");

                    b.Property<float>("ZAxis")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Gyroscope");
                });

            modelBuilder.Entity("EntityFrame.API.Models.HeartRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCode")
                        .HasColumnType("datetime2");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("HeartRate");
                });

            modelBuilder.Entity("EntityFrame.API.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("TimeCode")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("EntityFrame.API.Models.Temperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCode")
                        .HasColumnType("datetime2");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Temperature");
                });

            modelBuilder.Entity("EntityFrame.API.Models.TypesOfData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypesOfData");
                });

            modelBuilder.Entity("EntityFrame.API.Models.Accelerometer", b =>
                {
                    b.HasOne("EntityFrame.API.Models.Session", "Session")
                        .WithMany("Accelerometers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("EntityFrame.API.Models.Gyroscope", b =>
                {
                    b.HasOne("EntityFrame.API.Models.Session", "Session")
                        .WithMany("Gyroscopes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("EntityFrame.API.Models.HeartRate", b =>
                {
                    b.HasOne("EntityFrame.API.Models.Session", "Session")
                        .WithMany("HeartRates")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("EntityFrame.API.Models.Temperature", b =>
                {
                    b.HasOne("EntityFrame.API.Models.Session", "Session")
                        .WithMany("Temperatures")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("EntityFrame.API.Models.Session", b =>
                {
                    b.Navigation("Accelerometers");

                    b.Navigation("Gyroscopes");

                    b.Navigation("HeartRates");

                    b.Navigation("Temperatures");
                });
#pragma warning restore 612, 618
        }
    }
}
